#+title: Notes for development of "Install Arch Script"
#+author: AL
#+date: [2023-12-02]

* Current todo [2023-12-02]
TODO [0/5]
- [ ] #dev: LOG functional;
- [ ] #dev: additional info about packages for every stage;
- [ ] #DEFINE_ArchInstall: [0/4]
  - [ ] define what packages to install with official installer;
  - [ ] get list of missing firmware on PC;
  - [ ] may be 'base' 'curl' 'make' are already installed by official installation;
  - [ ] get & save .json from official installer;
- [ ] discover how to echo string to a proper section of a file (maybe "sed");
- [ ] #maybe: ? colorise messages ?



* # ---- List of packages ----

# ---- ABOUT PACKAGES ----
# ---- 0). additional packages during install (insert manually):
#
#
# ---- 1). list of hardware packages ----
# ## ---- INTEL drivers for PC (microcode);
#
#
# ## ---- VIDEO drivers for PC (NVIDIA 250);
#
#
# ## ---- AUDIO drivers for PC (pipeware);
#
#
# ## ---- WACOM drivers for PC (Wacom Intuos Pro)
#
#
# ---- 2). list of base packages (system-wide "evergreens")
# ## -- system
# base base-devel linux linux-firmware linux-headers
#
# ### -- ?? ntfs support ?
# |? ntfs-3g
#
# ## -- cmd line tools
# make cmake
# git wget curl
# zip unzip unrar p7zip
# tree htop neofetch
# |? bash-completion less
# |? scrot feh nnn
#
#
# -- cmd line media
# ffmpeg yt-dlp zathura
#
#
# ## --- ssh, vpn
# openssh openvpn
#
#
# ## -- Xorg
# xorg xorg-server xorg-xrandr
# xclip
#
#
# ## -- main terminal emulator
# kitty
#
# ## -- sys use
# dmenu
# |? xwallpaper
#
#
# ## -- for Emacs
# fd ripgrep
#
# ---- 3). System-wide software
# neovim                                # --- neovim
# elinks firefox                        # --- browser
# font-manager                          # --- OS tool
# gimp obs-studio mpv                   # --- media
# emacs-nativecomp                      # --- emacs
#
# ???? -- optional or postponed --
# tmux                                  # --- terminal multiplexer *2)
#
# ---- 1.2.) Setup base soft
# AIM: manage settings via dotfiles
# .. .. .. .. .. .. .. .. .. ..
# .. .. .. .. .. .. .. .. .. ..
# .. .. .. .. .. .. .. .. .. ..
#
#
#---- 2.1.) list of second packages ----
#
#
#
#
# ---- 2.2.) Setup second soft ----
# AIM: mamnsge settings via dotfiles
# .. .. .. .. .. .. .. .. .. ..
# .. .. .. .. .. .. .. .. .. ..
# .. .. .. .. .. .. .. .. .. ..
#
# ---- III) list of second packages ----
# -- for 'nnn', terminal file manager
# zathura libspectre zatura-cb          # --- for 'nnn' plugin 'nuke' to view documents
# zathura-djvu zathura-pdf-mupdf        # --- for 'nnn' plugin 'nuke' to view documents
# zathura-ps                            # --- for 'nnn' plugin 'nuke' to view documents
# atool                                 # --- for 'nnn' plugin 'nuke', a script to manage archives
# fish fisher                           # --- interactive shell *1) :have_settings:
# *1) NOTE: install for fish, run in terminal (ssh-agent utility; POSIX-compatible for bash):
# $ fisher install danhper/fish-ssh-agent
# $ fisher install jorgebucaran/fish-bax
# NOTE: changes in alacritty to start fish at launch -> !/.config/alacritty/alacritty.yml
# *2) NOTE: install tmux plugin manager
# plugin manager: https://github.com/tmux-plugins/tpm
#
# - to read: https://github.com/rothgar/awesome-tmux
#
#
* # ---- BRIF ABOUT : ----

# <2023-11-26> _ Base file to create script for my cusom OS installation
# this version is for monolith script to decompose further
#
# ---- sources
# arch-linux wiki: https://wiki.archlinux.org/title/Installation_guide
# alis script: https://github.com/picodotdev/alis
#

# 0) OS: Arch Linux
# 1) user name: al
# 2) x-tile manager: bspwm
# 3) keyboard manager: shxkd
# 4) terminal env: bash
# 5) terminal emulator: kitty
# 6) text editor: vim; nvim; emacs (doom emacs);
# 7) default browser: firefox
# 8) env manager: miniconda3
# 9) cli file manager: mc
# 10) Storage for user configs:
# - notabug.org ....
# - /mnt/hdd ....
# - ? usb (ventoy) ....

* # ---- Scripts to use

** ---- script to use file as a list of packages:
https://habr.com/ru/companies/ruvds/articles/325928/
important NOTE: sourse file contains only one value in line - no backspaces(!)

#+begin_src shell :noeval true :eval no

#!/bin/bash
file="~/Stor/dotfiles/script/soft_list_01.xtx"      # file to read
IFS=$'\n'                                           # divider for values - new line
for var in $(cat $file)                             # read file, start cycle for variable 'var'
do                                                  # do
    echo " $var"                                    # operation
done                                                # end
#

#+end_src

** ---- NOTE: read from txt and install
#+begin_src shell :noeval true :eval no

sudo su -
sudo pacman -Qe | awk '{print $1}' > package_list.txt
for x in $(cat package_list.txt); do sudo pacman -S --noconfirm --needed $x; done
#
#+end_src

** ---- to list packages without versions
#+begin_src shell :noeval true :eval no
sudo pacman -Qqe
#+end_src

** ---- my: NOTE: to install nerd fonts use:

#+begin_src shell :noeval true :eval no
#
sudo pacman -Qg nerd-fonts | wc -l && sudo pacman -S $(pacman -Sgq nerd-fonts)
#
#+end_src
** ---- NOTE: to use for standard start/stop messages:

#+begin_src shell :noeval true :eval no

function print_step() {
    STEP="$1"
    echo ""
    echo -e "${BLUE}# ${STEP} step${NC}"
    echo ""
}

function execute_step() {
    local STEP="$1"
    eval "$STEP"
}

#+end_src

* # ---- RAW VICTORS PART OF FILE

#+begin_src shell :noeval true :eval no



# -----------------------------------------------------------------------------
# --- INSTALL DIALOG
# A tool to display dialog boxes from shell scripts
# https://invisible-island.net/dialog/
# -----------------------------------------------------------------------------
# sudo pacman --noconfirm --needed -Sy dialog

# -----------------------------------------------------------------------------
# --- SYSTEM UPDATE
# -----------------------------------------------------------------------------
# system_update(){
#     echo -e "${green}${bold}[*] DOING A SYSTEM UPDATE...${normal}${no_color}"
#     echo
#     sleep 1
#
#     sudo pacman -Sy --noconfirm archlinux-keyring
#     sudo pacman --noconfirm -Syu
#     sudo pacman -S --noconfirm --needed base-devel wget git curl
#
#     echo
#     echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
#     echo
# }
#
# -----------------------------------------------------------------------------
# --- INSTALL AUR HELPER
# -----------------------------------------------------------------------------
# install_aur_helper(){
#    if ! command -v "$aurhelper" &> /dev/null
#    then
#    echo -e "${green}${bold}[*] IT SEEMS THAT YOU DON'T HAVE $aurhelper INSTALLED, I'LL INSTALL THAT FOR YOU BEFORE CONTINUING.${normal}${no_color}"
#    echo
#    sleep 1
#
#    git clone https://aur.archlinux.org/"$aurhelper".git $HOME/.srcs/"$aurhelper"
#    (cd $HOME/.srcs/"$aurhelper"/ && makepkg -si)
#
#    else
#
#    echo -e "${green}[*] IT SEEMS THAT YOU ALREADY HAVE $aurhelper INSTALLED, SKIPPING.${no_color}"
#
#    echo
#    sleep 1
#
#    fi
#
#    echo
#    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
#    echo
# }

# -----------------------------------------------------------------------------
# --- INSTALL PACKAGES WHITH PACMAN
# -----------------------------------------------------------------------------
install_pkgs(){
    echo -e "${green}${bold}[*] INSTALLING PACKAGES WITH PACMAN...${normal}${no_color}"
    echo
    sleep 1

    PKGS=(
    # INSTALLING XORG ---------------------------------------------------------

#   'xorg'
#   'xorg-server'
#   'xorg-apps'
#   'xorg-xinit'
#   'xf86-video-intel'
#   'mesa'
#   'acpi'            # ACPI (Advanced Configuration and Power Interface)
#   'pacman-contrib'  # Contributed scripts and tools for pacman systems

    # TERMINAL EMULATOR -------------------------------------------------------

    'alacritty'
 #   'kitty'

    # TERMINAL UTILITES -------------------------------------------------------

    'htop'
    'neovim'
    'neofetch'
    'xclip'
    'feh'
    'scrot'
    'openssh'
    'ripgrep'
    'fd'
    'yt-dlp'
#    'dunst'
#    'flameshot'
#    'fish'
#    'file-roller'
#    'sbxkb'
#    'gufw'
#    'hardinfo'
#    'inxi'
#    'jq'
#    'jshon'
#    'ntp'
#    'numlockx'
#    'rsync'
#    'tlp'
#    'pass'
#    'fzf'
#    'picom'
#    'tmux'
#    'man-db'
#    'cmatrix'
#    'ncdu'
#    'calcurse'
#    'unclutter'
#    'bat'
#    'exa'
#    'dosfstools'
#    'brightnessctl'
#    'lazygit'

    # MEDIA -------------------------------------------------------------------

    'alsa-utils'
    'ffmpeg'
    'pavucontrol'
    'mpv'
#    'mpd'
#    'ncmpcpp'
#    'cmus'

    # PRODUCTIVITY ------------------------------------------------------------

#    'galculator'
#    'zathura'
#    'zathura-pdf-mupdf'
#    'obsidian'

    # FILEMANAGER -------------------------------------------------------------

    'nnn'
#    'nemo'
#    'ranger'
#    'mc'
#    'thunar'
#    'thunar-archive-plugin'
#    'thunar-volman'

    # WEB TOOLS ---------------------------------------------------------------

    'firefox'
    # 'links'

    # ARCHIVE -----------------------------------------------------------------

    'unrar'
    'unzip'
    'zip'
    'p7zip'

    # DISK UTILITIES ----------------------------------------------------------

#    'autofs'
#    'exfat-utils'
#    'gparted'
#    'gnome-disks'
#    'ntfs-3g'
#    'parted'
#    'gvfs'
#    'gvfs-mtp'
#    'gvfs-afc'
#    'gvfs-gphoto2'
#    'gvfs-nfs'
#    'gvfs-smb'
#    'xdg-utils'
#    'xdg-user-dirs-gtk'

    # GENERAL UTILITIES -------------------------------------------------------

 #   'veracrypt' # Disc encryption utility
 #   'keepassxc' # Pass manager
 #   'catfish'   # Filesystem search

    # GENERAL UTILITIES -------------------------------------------------------

#    'arc-gtk-theme'
    # 'lxappearance'

    # SYSTEM UTILITIES -------------------------------------------------------

#    'psutils'

    # FONTS -------------------------------------------------------

    'adobe-source-code-pro-fonts'
    'nerd-fonts'
    'noto-fonts'
    'noto-fonts-emoji'
    'noto-fonts-cjk'
    'ttf-jetbrains-mono'
    'ttf-joypixels'
    'ttf-font-awesome'
    'ttf-hack'
    'terminus-font'
    )

    for PKG in "${PKGS[@]}"; do
        sudo pacman -S "$PKG" --noconfirm --needed
    done

    echo
    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
    echo
}

# -----------------------------------------------------------------------------
# --- INSTALL PACKAGES WITH $aurhelper
# -----------------------------------------------------------------------------
# install_aur_pkgs(){
#    echo -e "${green}${bold}[*] INSTALLING PACKAGES WITH $aurhelper...${normal}${no_color}"
#    echo
#    sleep 1
#
#    PKGS=(
#        'cava'
#        'ueberzug'
#        'volctl'
#        'caffeine-ng'
#        'picom-git'
#        'brother-hl1210w'
#    )
#
#    for PKG in "${PKGS[@]}"; do
#        "$aurhelper" -S "$PKG" --noconfirm --needed
#    done
#
#    echo
#    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
#    echo
# }

# -----------------------------------------------------------------------------
# --- INSTALL DEVELOPMENT
# -----------------------------------------------------------------------------
install_development(){
  echo -e "${green}${bold}[*] INSTALLING DEVELOPMENT...${normal}${no_color}"
  echo
  sleep 1

  PKGS=(
    'dbeaver'
#    'nodejs'
#    'npm',
#    'yarn'
#    'pyenv'
#    'filezilla'
#    'code'
#    'tmux'
#    'neovim'
    # NOTE: add docker, postgresql
  )

  for PKG in "${PKGS[@]}"; do
    sudo pacman -S "$PKG" --noconfirm --needed
  done

  echo
  echo -e "${magenta}${bold}[+] DONE ------------------------------------------${normal}${no_color}"
  echo
}

# -----------------------------------------------------------------------------
# --- INSTALL GRAPHICS AND DESIGN
# -----------------------------------------------------------------------------
install_graphics(){
  echo -e "${green}${bold}[*] INSTALLING GRAPHICS AND DESIGN...${normal}${no_color}"
  echo
  sleep 1

  PKGS=(
#    'gcolor2'
#    'gcolor3'
    'gimp'
#    'inkscape'
#    'krita'
#    'imagemagick'
#    'nomacs'
#    'pngcrush'
#    'ristretto'
#    'sxiv'
  )

  for PKG in "${PKGS[@]}"; do
    sudo pacman -S "$PKG" --noconfirm --needed
  done

  echo
  echo -e "${magenta}${bold}[+] DONE ------------------------------------------${normal}${no_color}"
  echo
}

# -----------------------------------------------------------------------------
# --- INSTALL NETWORK
# -----------------------------------------------------------------------------
install_network(){
  echo -e "${green}${bold}[*] INSTALLING NETWORK...${normal}${no_color}"
  echo
  sleep 1

  PKGS=(
    'openvpn'
#    'wpa_supplicant'
#    'dialog'
#    'networkmanager'
#    'networkmanager-openvpn'
#    'networkmanager-vpnc'
#    'network-manager-applet'
#    'dhclient'
#    'libsecret'
#    'dnsutils'
#    'dhcpcd'
  )

  for PKG in "${PKGS[@]}"; do
    sudo pacman -S "$PKG" --noconfirm --needed
  done

  # sudo systemctl enable NetworkManager.service
  # sudo systemctl start NetworkManager.service

  echo
  echo -e "${magenta}${bold}[+] DONE ------------------------------------------${normal}${no_color}"
  echo
}

# -----------------------------------------------------------------------------
# --- INSTALL PRINTERS & SACANNERS
# -----------------------------------------------------------------------------
# install_printers_scanners(){
#  echo -e "${green}${bold}[*] INSTALLING PRINTERS & SACANNERS...${normal}${no_color}"
#  echo
#  sleep 1

#  PKGS=(
#    'cups'
#    'cups-pdf'
#    'ghostscript'
#    'gsfonts'
#    'system-config-printer'
#    'skanlite'
#    'simple-scan'
#    'sane'
#    'sane-airscan'
#  )

#  for PKG in "${PKGS[@]}"; do
#    sudo pacman -S "$PKG" --noconfirm --needed
#  done

  # sudo systemctl enable org.cups.cupsd.service
  # sudo systemctl start org.cups.cupsd.service
  # sudo systemctl enable --now cups

#  echo
#  echo -e "${magenta}${bold}[+] DONE ------------------------------------------${normal}${no_color}"
#  echo
# }

# -----------------------------------------------------------------------------
# --- INSTALL BLUETOOTH
# -----------------------------------------------------------------------------
# install_bluetooth(){
#  echo -e "${green}${bold}[*] INSTALLING BLUETOOTH...${normal}${no_color}"
#  echo
#  sleep 1

#  PKGS=(
#    'bluez'
#    'bluez-utils'
#    'bluez-firmware'
#    'blueberry'
#    'pulseaudio-bluetooth'
#    'blueman'
#  )

 # for PKG in "${PKGS[@]}"; do
 #   sudo pacman -S "$PKG" --noconfirm --needed
 # done

  # sudo systemctl enable bluetooth
  # sudo systemctl start bluetooth

#  echo
#  echo -e "${magenta}${bold}[+] DONE ------------------------------------------${normal}${no_color}"
#  echo
# }

# -----------------------------------------------------------------------------
# --- INSTALL VIRTUAL MACHINE NOTE: to check
# -----------------------------------------------------------------------------
install_vm(){
  echo -e "${green}${bold}[*] INSTALLING QEMU A GENERIC AND OPEN SOURCE MACHINE EMULATOR AND VIRTUALIZER...${normal}${no_color}"
  echo
  sleep 1

  PKGS=(
    'virt-manager'
    'qemu'
    'bridge-utils'
    'ebtables'
  )

  for PKG in "${PKGS[@]}"; do
    sudo pacman -S "$PKG" --noconfirm --needed
  done

  # sudo systemctl enable libvirtd
  # sudo systemctl enable ebtables
  # sudo systemctl enable dnsmasq
  # sudo gpasswd -a user libvirt
  # sudo gpasswd -a user kvm

  echo
  echo -e "${magenta}${bold}[+] DONE ------------------------------------------${normal}${no_color}"
  echo
}

# -----------------------------------------------------------------------------
# --- CREATE DEFAULT DIRECTORIES
# -----------------------------------------------------------------------------
create_default_directories(){
    echo -e "${green}${bold}[*] COPYING CONFIGS TO $config_directory...${normal}${no_color}"
    echo
    sleep 1

    mkdir -p "$HOME"/.config && echo -e "${magenta}- [+] DONE -> .config/"
    sudo mkdir -p  /usr/local/bin && echo -e "${magenta}- [+] DONE -> /usr/local/bin"
    sudo mkdir -p  /usr/share/themes && echo -e "${magenta}- [+] DONE -> /usr/share/themes"
    mkdir -p "$HOME"/Pictures/wallpapers && echo -e "${magenta}- [+] DONE -> /Pictures/wallpapers"

    echo
    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
    echo
}

# -----------------------------------------------------------------------------
# --- CREATE BACKUP
# -----------------------------------------------------------------------------
create_backup(){
    echo -e "${green}${bold}[*] INSTALLING CREATING BACKUP OF EXISTING CONFIGS...${normal}${no_color}"
    echo
    sleep 1

    [ -d "$config_directory"/alacritty ] && mv "$config_directory"/alacritty "$config_directory"/alacritty_$date && echo "alacritty configs detected, backing up."
    [ -d "$config_directory"/kitty ] && mv "$config_directory"/kitty "$config_directory"/kitty_$date && echo "alacritty configs detected, backing up."
    [ -d "$config_directory"/dunst ] && mv "$config_directory"/dunst "$config_directory"/dunst_$date && echo "dunst configs detected, backing up."
    [ -d "$config_directory"/mpd ] && mv "$config_directory"/mpd "$config_directory"/mpd_$date && echo "mpd configs detected, backing up."
    [ -d "$config_directory"/ncmpcpp ] && mv "$config_directory"/ncmpcpp "$config_directory"/ncmpcpp_$date && echo "ncmpcpp configs detected, backing up."
    [ -d "$config_directory"/ranger ] && mv "$config_directory"/ranger "$config_directory"/ranger_$date && echo "ranger configs detected, backing up."
    [ -d "$config_directory"/zathura ] && mv "$config_directory"/zathura "$config_directory"/zathura_$date && echo "zathura configs detected, backing up."
    [ -d "$config_directory"/picom ] && mv "$config_directory"/picom "$config_directory"/picom_$date && echo "picom configs detected, backing up."

    [ -f "$config_directory"/Code\ -\ OSS/User/settings.json ] && mv "$config_directory"/Code\ -\ OSS/User/settings.json "$config_directory"/Code\ -\ OSS/User/settings.json_$date && echo "Vsc configs detected, backing up."

    # [ -d "$config_directory"/neofetch ] && mv "$config_directory"/neofetch "$config_directory"/neofetch_$date && echo "neofetch configs detected, backing up."
    # [ -d "$config_directory"/nvim ] && mv "$config_directory"/nvim "$config_directory"/nvim_$date && echo "nvim configs detected, backing up."
    # [ -d "$config_directory"/polybar ] && mv "$config_directory"/polybar "$config_directory"/polybar_$date && echo "polybar configs detected, backing up."

    # [ -d "$scripts_directory" ] && sudo mv "$scripts_directory" "$scripts_directory"_$date && echo "scripts ($scripts_directory) detected, backing up."

    # [ -f /etc/fonts/local.conf ] && sudo mv /etc/fonts/local.conf /etc/fonts/local.conf_$date && echo "Fonts configs detected, backing up."

    echo
    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
    echo
}

# -----------------------------------------------------------------------------
# ---  COPY CONFIGS
# -----------------------------------------------------------------------------
copy_configs(){
    echo -e "${green}${bold}[*] COPYING CONFIG TO... $config_directory ${normal}${no_color}"
    echo
    sleep 1

    cp -r $HOME/.dotfiles/config/* "$config_directory"

    # Symlinks Config
    ln -s $HOME/.dotfiles/other_config/alias ~/.alias
    ln -s $HOME/.dotfiles/other_config/tmux.conf ~/.tmux.conf
    ln -s $HOME/.dotfiles/other_config/xinitrc ~/.xinitrc
    ln -s $HOME/.dotfiles/other_config/Xresources ~/.Xresources

    cp -r $HOME/.dotfiles/other_config/gtkrc-2.0 ~/.gtkrc-2.0
    cp -r $HOME/.dotfiles/config/gtk-2.0 ~/.config
    cp -r $HOME/.dotfiles/config/gtk-3.0 ~/.config

    rm $HOME/.config/alacritty/alacritty.yml
    ln -s $HOME/.dotfiles/config/alacritty/alacritty.yml $HOME/.config/alacritty/alacritty.yml
    rm $HOME/.config/cava/config
    ln -s $HOME/.dotfiles/config/cava/config $HOME/.config/cava/config
    rm $HOME/.config/dunst/dunstrc
    ln -s $HOME/.dotfiles/config/dunst/dunstrc $HOME/.config/dunst/dunstrc
    rm $HOME/.config/kitty/kitty.conf
    ln -s $HOME/.dotfiles/config/kitty/kitty.conf $HOME/.config/kitty/kitty.conf
    rm $HOME/.config/mpd/mpd.conf
    ln -s $HOME/.dotfiles/config/mpd/mpd.conf $HOME/.config/mpd/mpd.conf
    rm $HOME/.config/mpv/mpv.conf
    ln -s $HOME/.dotfiles/config/mpv/mpv.conf $HOME/.config/mpv/mpv.conf
    rm $HOME/.config/ncmpcpp/config
    ln -s $HOME/.dotfiles/config/ncmpcpp/config $HOME/.config/ncmpcpp/config
    rm $HOME/.config/ranger/rc.conf
    ln -s $HOME/.dotfiles/config/ranger/rc.conf $HOME/.config/ranger/rc.conf
    rm $HOME/.config/zathura/zathurarc
    ln -s $HOME/.dotfiles/config/zathura/zathurarc $HOME/.config/zathura/zathurarc
    rm $HOME/.config/picom/picom.conf
    ln -s $HOME/.dotfiles/config/picom/picom.conf $HOME/.config/picom/picom.conf

    echo
    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
    echo
}

# -----------------------------------------------------------------------------
# --- COPY SCRIPTS
# -----------------------------------------------------------------------------
copy_scripts(){
    echo -e "${green}[*] COPYING SCRIPTS TO... $scripts_directory.${no_color}"
    echo
    sleep 1

    # sudo cp -r ./scripts/* "$scripts_directory"
    echo "COPY MY SCRIPTS ..."

    echo
    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
    echo
}

# -----------------------------------------------------------------------------
# --- FINISHING
# -----------------------------------------------------------------------------
finishing(){
    echo -e "${green}[*] FINISHING... $scripts_directory.${no_color}"
    echo
    sleep 1

    fc-cache -fv

    echo "[ -f ~/.alias ] && source ~/.alias" >> $HOME/.bashrc
    echo "[ -f ~/.alias ] && source ~/.alias" >> $HOME/.config/fish/config.fish

#    sudo systemctl enable NetworkManager.service
#    sudo systemctl start NetworkManager.service
#    sudo systemctl enable org.cups.cupsd.service
#    sudo systemctl start org.cups.cupsd.service
#    sudo systemctl enable --now cups
#    sudo systemctl enable bluetooth
#    sudo systemctl start bluetooth
#    sudo systemctl enable libvirtd
#    sudo systemctl enable ebtables
#    sudo systemctl enable dnsmasq
#    sudo gpasswd -a user libvirt
#    sudo gpasswd -a user kvm

    cp -r $HOME/.dotfiles/wallpaper/* $HOME/Pictures/wallpapers
    cp -r $HOME/.dotfiles/ThemeIcons/kora-1-5-6 $HOME/.icons

    git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons

    echo
    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
    echo
}

# TODO: INSTALL WM TODIALOG DWM DWM_FLEXIPATCH QTILE BSPWM

# -----------------------------------------------------------------------------
# --- INSTALL DWM
# -----------------------------------------------------------------------------
install_dwm(){
    echo -e "${green}[*] INSTALL DWM...${no_color}"
    echo
    sleep 1

    [ -d "$config_directory"/suckless ] && rm -rf "$config_directory"/suckless

    cp -r $HOME/.dotfiles/WM/suckless/ "$config_directory"/suckless

    cd $HOME/.config/suckless/dwm-6.4
    sudo make uninstall
    sudo make clean install
    echo -e "${magenta}[+] DWM INSTALLED ---${normal}${no_color}"

    cd $HOME/.config/suckless/dmenu-5.2
    sudo make uninstall
    sudo make clean install
    echo -e "${magenta}[+] DMENU INSTALLED ---${normal}${no_color}"

    cd $HOME/.config/suckless/st-0.9
    sudo make uninstall
    sudo make clean install
    echo -e "${magenta}[+] ST INSTALLED ---${normal}${no_color}"

    cd $HOME/.config/suckless/slstatus
    sudo make uninstall
    sudo make clean install
    echo -e "${magenta}[+] SLSTATUS INSTALLED ---${normal}${no_color}"

    cd $HOME/.config/suckless/slock-1.5
    sudo make uninstall
    sudo make clean install
    echo -e "${magenta}[+] SLOCK INSTALLED ---${normal}${no_color}"

    cd

    echo
    echo -e "${magenta}${bold}[+] DONE ----------------------------------------${normal}${no_color}"
    echo
}

# -----------------------------------------------------------------------------
# --- INSTALL QTILE
# -----------------------------------------------------------------------------
install_qtile(){
  echo -e "${green}${bold}[*] INSTALLING QTILE WM ...${normal}${no_color}"
  echo
  sleep 1

  PKGS=(
      'qtile'
  )

  for PKG in "${PKGS[@]}"; do
    sudo pacman -S "$PKG" --noconfirm --needed
  done

  echo
  echo -e "${magenta}${bold}[+] DONE ------------------------------------------${normal}${no_color}"
  echo
}

cmd=(dialog --clear --title "Aur helper" --menu "Firstly, select the aur helper you want to install (or have already installed)." 10 50 16)
options=(1 "yay" 2 "paru")
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

case $choices in
    1) aurhelper="yay";;
    2) aurhelper="paru";;
esac

cmd=(dialog --clear --separate-output --checklist "Select (with space) what script should do.\\nChecked options are required for proper installation, do not uncheck them if you do not know what you are doing." 26 86 16)
options=(
    1 "System update" on
    2 "Install aur helper" on
    3 "Install basic packages" on
    4 "Install basic packages (aur)" on
    5 "Install development" off
    6 "Install graphics and design" off
    7 "Install network" on
    8 "Install printers & sacanners" off
    9 "Install bluetooth" off
    10 "Install virtual machine" off
    11 "Create default directories" on
    12 "Create backup of existing configs (to prevent overwritting)" off
    13 "Copy configs" off
    14 "Copy scripts" off
    15 "Alias, Enable Services" on
)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear

for choice in $choices
do
    case $choice in
        1) system_update;;
        2) install_aur_helper;;
        3) install_pkgs;;
        4) install_aur_pkgs;;
        5) install_development;;
        6) install_graphics;;
        7) install_network;;
        8) install_printers_scanners;;
        9) install_bluetooth;;
        10) install_vm;;
        11) create_default_directories;;
        12) create_backup;;
        13) copy_configs;;
        14) copy_scripts;;
        15) finishing;;
    esac
done

cmd=(dialog --clear --separate-output --checklist "Select (with space) what script should do.\\nChecked options are required for proper installation, do not uncheck them if you do not know what you are doing." 26 86 16)
options=(
    1 "Install DWM 6.4 (Window Manager)" on
    2 "Install Qtile (Window Manager)" off
)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear

for choice in $choices
do
    case $choice in
        1) install_dwm;;
        2) install_qtile;;
    esac
done



#+end_src
* # ---- repo README.md add ----
#+begin_src md

### Brif

**State:**
: in progress
**Stage:**
: scope design

### About

Aim is to make full OS and software insatallation and configuration whith no pain.
Script have to automate steps after installing Arch Linux on my PC.

### Overview

##### Script have to (general workflow) :
* **01. Upgrade/update system after installation.**
* **02. Make base system-wide configurations.**
* **03. Prepare infrastructure and install main packages (base env);**
* **04. Configure main packages with user dotfiles (base env);**
* **05. Prepare infrastructure, install VM and environments managers;**
* **06. Install and configure user environments and VM-s;**
* **07. Install and configure current active project environments and VM-s;**

##### Workflow details
* **00. Arch Linux official installer finished succesfully.**
  - only official installer ("archlinux install");
  - GRUB;
  - locale: "US";
  - host name: "pc";
  - user name: "al";
  - user is in "wheel" group & user is sudo-er;
  - bspwm (tile windows manager), sxhkd (keyboard manager);
  - ? NOTE: get json after official installer setup;
  - ?

* **01. Base system config ('first steps').**

  - update keyring;
  - partial update;
  - system update/upgrade;
  - ? ...

* **02. Setup timeserver, enable nth-server as a service.**

* **03. Install X11, x-server.**

* **04. Install Intel microcode.**

  - ? upgrade grub ->? reboot ?

```sh
grub install ...                # define
grub-mkconfig -o /boot/grub.cfg
```

* **05. Install solutions for unknown devices [2023-11-29].**

```sh
  gla2xx -> pkg "linux-firmware-qlogic";
  aic94xx -> pkg _AUR_ "aic94xx-firmware";
  qla1280 -> pkg "linux-firmware-qlogic";
  bfa -> pkg "linux-firmware-qlogic";
  qed -> pkg "linux-firmware-qlogic";
  wd719x -> pkg _AUR_ "wd719x-firmware" -> ($ sudo pacman -S lha);
  xhpci_pci *->* _AUR_ "upd72020x-fw"
```

* **04. Install Nvidia drivers.**

* **05. Install wacom drivers ( ? and soft ? ).**

* **06. Install locale "RU".**

```shell
touch ~/.xinitrc
echo "setxkbmap -layout us,ru -option grp:caps_toggle" >> .xinitrc
```

* **06. Install fonts.**

* **07. Install packages for base environment ('evergreens').**

* **08. Setup packages for base environment (load and place dotfiles).**

* **09. Install environment manager (miniconda3).**

* **10. Install and setup environments.**

* **11. ? ...**

Workflow devided into **STAGES**.
Stages, which needs reboot, are located in **separate scripts**.
Head .sh is to rule stages workflow via sequential execution of functions.
Base actions are is in separate 'functions'.
Data for messages and configs are in separate files.

### TODO

- [ ] Get configuration of official arch-installer (.json) in stage_00.
- [ ] Clear architecture plan.
- [ ] Define 'sanitaize'. [to read_01](https://github.com/picodotdev/alis)
- [ ] Define using separate configs for bash scripts. [to read_01](https://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script)
- [ ] ...


#+end_src

* Repo NOTES
** ###### Create a new repository on the command line

``` sh
touch README.md .gitignore (or copy from my notebug notes)
git init
git add README.md
git commit -m "first commit"
git remote add origin git@notabug.org:myroot/os_install.git
git push -u origin master
```

** ###### Push an existing repository from the command line

``` sh
git remote add origin git@notabug.org:myroot/os_install.git
git push -u origin master
```

** ###### Repo link

``` sh
git@notabug.org:myroot/os_install.git
```
